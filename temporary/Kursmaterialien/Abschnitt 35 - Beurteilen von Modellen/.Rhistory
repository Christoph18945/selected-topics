shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
a <- 2
v <- c(1, 2, 3)
v <- c(1, 2, 3)
getwd(())
getwd()
devtools::install_github("rstudio/rmarkdown")
install.packages(c("broom", "data.table", "glue", "hms", "lazyeval", "lubridate", "Matrix", "odbc", "openssl", "pryr", "purrr", "Rcpp", "recipes", "rlang", "rmarkdown", "robustbase", "sparklyr", "stringi", "tidyr", "tidyselect", "tidyverse", "timeDate", "withr", "yaml"))
source('~/.active-rstudio-document')
print(v)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
print(v)
print("!!!")
print("Hallo Welt")
source('~/Untitled.R')
False
FALSE
TRUE
install.packages("ggplot2")
install.packages("ggplot2")
installed.packages()
installed.packages("ggplot2")
install.packages("swirl")
source('~/Untitled.R', echo=TRUE)
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
demo(graphics)
plot(cars)
knit_with_parameters('~/Untitled.Rmd')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
help("formula")
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Desktop/Kursmaterialien/101 - Lineare Regression/Lineare Regression (R).R')
source('~/Desktop/Kursmaterialien/101 - Lineare Regression/Lineare Regression (R).R')
install.packages(tibble)
install.packages("tibble")
library(tibble)
source('~/Desktop/Kursmaterialien/101 - Lineare Regression/Lineare Regression (R).R')
source('~/Desktop/Kursmaterialien/101 - Lineare Regression/Lineare Regression (R).R')
install.packages("ggplot")
install.packages(c("MASS", "mgcv", "rpart"))
install.packages("ggplot2")
rnorm?
=?
?rnorm
rnorm(10, 5, 1)
rnorm(10, 5, 1)
x <- c("a", "b", "c")
seq(from = 10, to = 20, along.with = x)
rep(5, 10)
rep(5:6, 10)
rep(5:6, times=10)
rep(5:6, each=10)
rep(5:6, each=c(4, 5))
rep(5:6, each=5
)
rep(5:6, each=5)
dump(x)
dump("x")
print(dump("x"))
print(dump("x", ""))
?dump
c(NA, 5L)
rownames
dimnames
m1 <- matrix(1:12, nrow = 3)
m1
dimnames(m1) <- c(month.abb[1:3], month.abb[4:7])
dimnames(m1) <- list(month.abb[1:3], month.abb[4:7])
m1
m2 <- matrix(1:12, nrow = 3)
dimnames(m2)
m2
m2[[1]]
m2[1]
m2[1, 2]
m2[[1, 2]
]
m2[[1, 2]]
m2[[1, 2]]
matrix(1:20, 4, 5)
matrix(1:20, 4, 5, byrow=T)
T
matrix(1:20, 4, 5, byrow=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
?I
I(x ^ 3)
x <- 4
I(x ^ 3)
x <- c(1:100)
y <- seq(0.1,10,0.1)
plot(y~x^3)
plot(y~I(x^3))
x <- c(1:100)
y <- seq(0.1,10,0.1)
plot(y~x^3)
plot(y~(x^3))
x3 = x ^ 3
plot(y ~ x3)
formula(a + b)
library(stats)
formula(a + b)
formula(y ~ a + b)
plot(formula(y ~ a + b))
plot(formula(y ~ x + 4))
plot(formula(y ~ y + 4))
qplot(formula(y ~ y + 4))
plot(formula(y ~ y + 4))
x <- c(1:100)
y <- seq(0.1,10,0.1)
plot(y~x^3)
plot(y~(x^3))
plot(y~(x^3))
plot(y~x)
plot(y~x+4)
plot(y~x^4)
source('~/Untitled.R')
source('~/Untitled.R')
debugSource('~/Untitled.R')
e[0]
e[1]
e[2]
e[3]
debugSource('~/Untitled.R')
debugSource('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
library(stringr)
source('~/Desktop/Kursmaterialien/145 - Projekt MNIST/Projekt MNIST.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/145 - Projekt MNIST/Projekt MNIST.R', echo=TRUE)
pred <- predict(model, test$data)
print(pred)
source('~/Desktop/Kursmaterialien/145 - Projekt MNIST/Projekt MNIST.R', echo=TRUE)
View(model)
pred <- predict.glm(model, test$data)
print(pred)
source('~/Desktop/Kursmaterialien/145 - Projekt MNIST/Projekt MNIST.R', echo=TRUE)
test.data <- data.table(test$data)
test.data$label <- test$labels == 5
pred <- predict(model, test.data[1:1000, ])
print(confusionMatrix(pred, test.data$label)$overall["Accuracy"])
test.data <- data.table(test$data)
test.data$label <- test$labels == 5
pred <- predict(model, test.data[1:1000, ], type = "class")
print(confusionMatrix(pred, test.data$label)$overall["Accuracy"])
print(pred)
pred <- predict(model, test.data[1:1000, ], type = "response")
pred <- predict.glm(model, test.data[1:1000, ], type = "response")
print(pred)
test.data <- data.table(test$data)
test.data$label <- test$labels == 5
pred <- predict.glm(model, test.data[1:1000, ], type = "response")
print(confusionMatrix(pred > 0.5, test.data$label)$overall["Accuracy"])
test.data <- data.table(test$data)
test.data$label <- test$labels == 5
pred <- predict.glm(model, test.data, type = "response")
print(confusionMatrix(pred > 0.5, test.data$label)$overall["Accuracy"])
test.data <- data.table(test$data)
test.data$label <- test$labels == 5
pred <- predict(model, test.data, type = "response")
print(confusionMatrix(pred > 0.5, test.data$label)$overall["Accuracy"])
source('~/Desktop/Kursmaterialien/145 - Projekt MNIST/Projekt MNIST.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/160 - Beurteilen von Modellen/Confusion Matrix.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/160 - Beurteilen von Modellen/Confusion Matrix.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/160 - Beurteilen von Modellen/Confusion Matrix.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/160 - Beurteilen von Modellen/Confusion Matrix.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/160 - Beurteilen von Modellen/Confusion Matrix.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/160 - Beurteilen von Modellen/Confusion Matrix.R', echo=TRUE)
install.packages("ROCR")
library(ROCR)
performance(pred, test$success)
source('~/Desktop/Kursmaterialien/160 - Beurteilen von Modellen/Confusion Matrix.R', echo=TRUE)
performance(pred, test$success)
p <- prediction(pred, test$success)
prediction(predict(model, test, type = "response") )
prediction(predict(model, test, type = "response"))
prediction(predict(model, test, type = "response"), test$success)
performance(p, "prec")
p <- prediction(predict(model, test, type = "response"), test$success)
performance(p, "prec")
precision(pred, test$success)
source('~/Desktop/Kursmaterialien/160 - Beurteilen von Modellen/Confusion Matrix.R', echo=TRUE)
precision(pred, test$success)
precision(table(pred, test$success))
recall(table(pred, test$success))
as.factor(c(TRUE, FALSE))
as.factor(c(FALSE, TRUE))
