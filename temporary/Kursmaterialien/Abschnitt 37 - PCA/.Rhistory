shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
a <- 2
v <- c(1, 2, 3)
v <- c(1, 2, 3)
getwd(())
getwd()
devtools::install_github("rstudio/rmarkdown")
install.packages(c("broom", "data.table", "glue", "hms", "lazyeval", "lubridate", "Matrix", "odbc", "openssl", "pryr", "purrr", "Rcpp", "recipes", "rlang", "rmarkdown", "robustbase", "sparklyr", "stringi", "tidyr", "tidyselect", "tidyverse", "timeDate", "withr", "yaml"))
source('~/.active-rstudio-document')
print(v)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
print(v)
print("!!!")
print("Hallo Welt")
source('~/Untitled.R')
False
FALSE
TRUE
install.packages("ggplot2")
install.packages("ggplot2")
installed.packages()
installed.packages("ggplot2")
install.packages("swirl")
source('~/Untitled.R', echo=TRUE)
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
demo(graphics)
plot(cars)
knit_with_parameters('~/Untitled.Rmd')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
help("formula")
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R', echo=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Desktop/Kursmaterialien/101 - Lineare Regression/Lineare Regression (R).R')
source('~/Desktop/Kursmaterialien/101 - Lineare Regression/Lineare Regression (R).R')
install.packages(tibble)
install.packages("tibble")
library(tibble)
source('~/Desktop/Kursmaterialien/101 - Lineare Regression/Lineare Regression (R).R')
source('~/Desktop/Kursmaterialien/101 - Lineare Regression/Lineare Regression (R).R')
install.packages("ggplot")
install.packages(c("MASS", "mgcv", "rpart"))
install.packages("ggplot2")
rnorm?
=?
?rnorm
rnorm(10, 5, 1)
rnorm(10, 5, 1)
x <- c("a", "b", "c")
seq(from = 10, to = 20, along.with = x)
rep(5, 10)
rep(5:6, 10)
rep(5:6, times=10)
rep(5:6, each=10)
rep(5:6, each=c(4, 5))
rep(5:6, each=5
)
rep(5:6, each=5)
dump(x)
dump("x")
print(dump("x"))
print(dump("x", ""))
?dump
c(NA, 5L)
rownames
dimnames
m1 <- matrix(1:12, nrow = 3)
m1
dimnames(m1) <- c(month.abb[1:3], month.abb[4:7])
dimnames(m1) <- list(month.abb[1:3], month.abb[4:7])
m1
m2 <- matrix(1:12, nrow = 3)
dimnames(m2)
m2
m2[[1]]
m2[1]
m2[1, 2]
m2[[1, 2]
]
m2[[1, 2]]
m2[[1, 2]]
matrix(1:20, 4, 5)
matrix(1:20, 4, 5, byrow=T)
T
matrix(1:20, 4, 5, byrow=TRUE)
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
?I
I(x ^ 3)
x <- 4
I(x ^ 3)
x <- c(1:100)
y <- seq(0.1,10,0.1)
plot(y~x^3)
plot(y~I(x^3))
x <- c(1:100)
y <- seq(0.1,10,0.1)
plot(y~x^3)
plot(y~(x^3))
x3 = x ^ 3
plot(y ~ x3)
formula(a + b)
library(stats)
formula(a + b)
formula(y ~ a + b)
plot(formula(y ~ a + b))
plot(formula(y ~ x + 4))
plot(formula(y ~ y + 4))
qplot(formula(y ~ y + 4))
plot(formula(y ~ y + 4))
x <- c(1:100)
y <- seq(0.1,10,0.1)
plot(y~x^3)
plot(y~(x^3))
plot(y~(x^3))
plot(y~x)
plot(y~x+4)
plot(y~x^4)
source('~/Untitled.R')
source('~/Untitled.R')
debugSource('~/Untitled.R')
e[0]
e[1]
e[2]
e[3]
debugSource('~/Untitled.R')
debugSource('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
source('~/Untitled.R')
library(stringr)
library(caret)
install.packages("openNLP")
install.packages("openNLPmodels.en")
install.packages("openNLPmodels.de")
install.packages("openNLPmodels.en", repos = "http://datacube.wu.ac.at/", type = "source")
install.packages("openNLPmodels.de")
install.packages("openNLPmodels.de", repos = "http://datacube.wu.ac.at/", type = "source")
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
install.packages("readr")
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
View(data)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
install.packages("R.utils")
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
View(data)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
print(prcomp(train[, -"Activity", with = FALSE]))
print(prcomp(train[, -"Activity"]))
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
View(pca)
pca[["x"]]
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
print(pca)
summary(pca)
pca$PCA1
pca["PC1"]
View(pca)
pca$x
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
View(train)
colnames(train)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
train$Activity
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
qplot(train.pca$x, geom = "point")
train.pca$x$PC1
train.pca$x["PC1"]
train.pca$x[, "PC1"]
train.pca$x$PC1
x <- train.pca$x
x$PC1
qplot(PC1 ~ PC2, train.pca)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren (Teil 2).R', echo=TRUE)
install.packages("plot3D")
train.pca <- prcomp(train[, -"Activity"], center = TRUE, scale. = TRUE, rank. = 3)
library("plot3D")
scatter3D(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], colvar = train$Activity)
scatter3D(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3])
scatter3D(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], col = train$Activity)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren (Teil 3).R', echo=TRUE)
train$Activity[levels(train$Activity)]
levels(train$Activity)[train$Activity]
levels(train$Activity)
train$Activity
as.numeric(train$Activity)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren (Teil 3).R', echo=TRUE)
scatter3D(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], col = as.numeric(train$Activity))
train.pca <- prcomp(train[, -"Activity"], center = TRUE, scale. = TRUE, rank. = 3)
scatter3D(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], col = as.numeric(train$Activity))
install.packages(c("rgl", "car"))
library("car")
scatter3d(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3])
scatter3d(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], point.col = train$Activity)
scatter3d(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], point.col = as.numeric(train$Activity))
scatter3d(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], point.col = as.numeric(train$Activity), surface = FALSE)
scatter3d(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], groups = train$Activity, surface = FALSE)
scatter3d(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], groups = train$Activity, surface = FALSE)
library("RColorBrewer")
colors <- brewer.pal(n=3, name="Dark2")
colors
library("RColorBrewer")
colors <- brewer.pal(n=7, name="Dark2")
scatter3d(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], groups = train$Activity, surface = FALSE, ellipsoid = TRUE,)
scatter3d(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], groups = train$Activity, surface = FALSE, ellipsoid = TRUE, surface.col = colors)
colors <- brewer.pal(n=7, name="Dark")
colors <- brewer.pal(n=7, name="Accent")
scatter3d(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], groups = train$Activity, surface = FALSE, ellipsoid = TRUE, surface.col = colors)
colors <- brewer.pal(n=7, name="Set2")
scatter3d(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], groups = train$Activity, surface = FALSE, ellipsoid = TRUE, surface.col = colors)
colors <- brewer.pal(n=7, name="Set3")
scatter3d(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], groups = train$Activity, surface = FALSE, ellipsoid = TRUE, surface.col = colors)
colors <- brewer.pal(n=7, name="Paired")
scatter3d(train.pca$x[, 1], train.pca$x[, 2], train.pca$x[, 3], groups = train$Activity, surface = FALSE, ellipsoid = TRUE, surface.col = colors)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren (Teil 3).R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren (Teil 3).R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren (Teil 3).R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren (Teil 3).R', echo=TRUE)
nlevels(train$Activity)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren (Teil 3).R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten visualisieren (Teil 3).R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
train$Activity
library(nnet)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
test$Activity
View(train.compressed)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
source('~/Desktop/Kursmaterialien/170 - PCA/PCA - Daten komprimieren und Modell trainieren.R', echo=TRUE)
